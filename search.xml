<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>面向过程与面向对象区别</title>
      <link href="/2025/06/01/python%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E4%B8%8E%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%8C%BA%E5%88%AB/"/>
      <url>/2025/06/01/python%E5%9F%BA%E7%A1%80/%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E4%B8%8E%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="Python面向过程-vs-面向对象（生活化解释）"><a href="#Python面向过程-vs-面向对象（生活化解释）" class="headerlink" title="Python面向过程 vs 面向对象（生活化解释）"></a>Python面向过程 vs 面向对象（生活化解释）</h1><h2 id="1-面向过程（Procedural-Programming）"><a href="#1-面向过程（Procedural-Programming）" class="headerlink" title="1. 面向过程（Procedural Programming）"></a>1. 面向过程（Procedural Programming）</h2><h3 id="🧑‍🍳-就像做菜时的菜谱"><a href="#🧑‍🍳-就像做菜时的菜谱" class="headerlink" title="🧑‍🍳 就像做菜时的菜谱"></a>🧑‍🍳 就像做菜时的菜谱</h3><ul><li><strong>一步一步执行</strong>，先做什么，后做什么</li><li><strong>数据和操作分开</strong>，比如菜谱（步骤）和食材（数据）是分开的</li></ul><h3 id="示例代码：煮泡面（面向过程）"><a href="#示例代码：煮泡面（面向过程）" class="headerlink" title="示例代码：煮泡面（面向过程）"></a>示例代码：煮泡面（面向过程）</h3><pre><code class="language-python"># 1. 准备食材noodles = &quot;泡面&quot;water = &quot;热水&quot;seasoning = &quot;调料包&quot;# 2. 定义步骤def boil_water():    print(&quot;烧水...&quot;)def add_noodles():    print(f&quot;加入&#123;noodles&#125;...&quot;)def add_seasoning():    print(f&quot;加入&#123;seasoning&#125;...&quot;)# 3. 按步骤执行boil_water()add_noodles()add_seasoning()</code></pre><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>代码是<strong>一步一步执行</strong>的，就像菜谱</li><li>如果要做更复杂的菜（比如炒菜），代码会变得很长、难维护</li></ul><hr><h2 id="2-面向对象（OOP）"><a href="#2-面向对象（OOP）" class="headerlink" title="2. 面向对象（OOP）"></a>2. 面向对象（OOP）</h2><h3 id="📦-就像现实世界的”对象”"><a href="#📦-就像现实世界的”对象”" class="headerlink" title="📦 就像现实世界的”对象”"></a>📦 就像现实世界的”对象”</h3><ul><li><strong>把数据和操作封装在一起</strong>，比如”泡面”是一个对象</li><li><strong>更接近现实世界</strong>，比如”人”有名字（属性）、会走路（方法）</li></ul><h3 id="示例代码：泡面（面向对象）"><a href="#示例代码：泡面（面向对象）" class="headerlink" title="示例代码：泡面（面向对象）"></a>示例代码：泡面（面向对象）</h3><pre><code class="language-python">class InstantNoodles:    def __init__(self, noodles, water, seasoning):        self.noodles = noodles  # 属性        self.water = water        self.seasoning = seasoning    def cook(self):  # 方法        print(f&quot;烧&#123;self.water&#125;...&quot;)        print(f&quot;加入&#123;self.noodles&#125;...&quot;)        print(f&quot;加入&#123;self.seasoning&#125;...&quot;)# 创建一包泡面my_noodles = InstantNoodles(&quot;泡面&quot;, &quot;热水&quot;, &quot;调料包&quot;)my_noodles.cook()  # 调用方法</code></pre><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul><li><strong>泡面是一个对象</strong>，它有属性（面条、水、调料）和方法（cook）</li><li>如果想做<strong>不同口味的泡面</strong>，只需要创建新对象，代码更灵活</li></ul><hr><table><thead><tr><th>场景</th><th>面向过程</th><th>面向对象</th></tr></thead><tbody><tr><td>泡面</td><td>按照菜谱一步步做</td><td>把泡面当成”对象”，直接调用cook()</td></tr><tr><td>汽车</td><td>先踩油门，再换挡…</td><td>直接car.drive()</td></tr><tr><td>游戏</td><td>先检测按键，再移动角色…</td><td>直接player.move()</td></tr><tr><td>适合场景</td><td>简单任务（如计算器）</td><td>复杂系统（如游戏、网站</td></tr></tbody></table><hr><h2 id="总结"><a href="#总结" class="headerlink" title=". 总结"></a>. 总结</h2><ul><li><strong>面向过程</strong>：<strong>“怎么做”</strong>（一步一步来，像菜谱）</li><li><strong>面向对象</strong>：<strong>“谁来做”</strong>（对象自己负责，比如泡面自己会cook）</li></ul><h3 id="🖥️-生活类比"><a href="#🖥️-生活类比" class="headerlink" title="🖥️ 生活类比"></a>🖥️ 生活类比</h3><ul><li><strong>面向过程</strong> → 自己动手组装电脑（一步一步装CPU、内存…）</li><li><strong>面向对象</strong> → 买一台现成的电脑（按开机键就能用）</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Series操作数据</title>
      <link href="/2025/05/27/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Series%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE/"/>
      <url>/2025/05/27/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Series%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="Series和Series之间的操作"><a href="#Series和Series之间的操作" class="headerlink" title="Series和Series之间的操作"></a>Series和Series之间的操作</h3><pre><code class="language-python">s1 + s2 会自动索引对齐报NAN</code></pre><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><pre><code class="language-python">(s1.add(s2,fill_value=0))</code></pre><p>示例</p><pre><code class="language-python">import pandas as pds1 = pd.Series([1,4,2,3,5])s2 = pd.Series([8,1,7,3,9])s3 = (s1.add(s2,fill_value=0))print(s3)</code></pre><h4 id="加减乘除"><a href="#加减乘除" class="headerlink" title="加减乘除"></a>加减乘除</h4><pre><code class="language-python">(s1.add(s2,fill_value=0)) #加(s1.sub(s2,fill_value=0)) #减(s1.mul(s2,fill_value=1)) #乘(s1.div(s2,fill_value=1)) #除</code></pre><h3 id="Series常用方法"><a href="#Series常用方法" class="headerlink" title="Series常用方法"></a>Series常用方法</h3><p>最大值、最小值、和、平均值</p><pre><code class="language-python">print(s3.max()) #最大值print(s3.min()) #最小值print(s3.sum()) #和print(s3.mean())#平均值</code></pre><p>describe方法报统计信息</p><pre><code class="language-python">s1.describe()</code></pre><p>示例</p><pre><code class="language-python">import pandas as pds1 = pd.Series([1,4,2,3,5])s2 = pd.Series([8,1,7,3,9])s3 = (s1.add(s2,fill_value=0))print(s3.describe())运行结果count     5.000000#个数mean      8.600000#平均值std       3.507136#标准差min       5.000000#最小值25%       6.000000#第一四分位数50%       9.000000#中位数75%       9.000000#第三四分位数max      14.000000#最大值dtype: float64</code></pre><h3 id="对元素分别操作"><a href="#对元素分别操作" class="headerlink" title="对元素分别操作"></a>对元素分别操作</h3><p>apply</p><pre><code class="language-python">import pandas as pdscores = pd.Series(&#123;    &quot;小明&quot;: 92,    &quot;小红&quot;: 67,    &quot;小杰&quot;: 70,    &quot;小丽&quot;: 88,    &quot;小华&quot;: 76&#125;)def get_grade_from_score(score):    &quot;&quot;&quot;根据分数返回等级&quot;&quot;&quot;    if score &gt;= 90:        return &quot;A&quot;    elif score &gt;= 80:        return &quot;B&quot;    elif score &gt;= 70:        return &quot;C&quot;    else:        return &quot;D&quot;grades = scores.apply(get_grade_from_score) #apply不改变scores的Seriesprint(grades)</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Pandas入门Series</title>
      <link href="/2025/05/26/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/pandas/"/>
      <url>/2025/05/26/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/pandas/</url>
      
        <content type="html"><![CDATA[<h1 id="Series数组"><a href="#Series数组" class="headerlink" title="Series数组"></a>Series数组</h1><h3 id="导入pandas库"><a href="#导入pandas库" class="headerlink" title="导入pandas库"></a>导入pandas库</h3><h4 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h4><pre><code class="language-python">import pandas as pds1 = pd.Series([1,2,3,4])print(s1)运行结果0    11    22    33    4dtype: int64</code></pre><h4 id="指定-Series-中每个数据值对应的标签（索引）使用index"><a href="#指定-Series-中每个数据值对应的标签（索引）使用index" class="headerlink" title="指定 Series 中每个数据值对应的标签（索引）使用index"></a>指定 Series 中每个数据值对应的标签（索引）使用index</h4><pre><code class="language-python">import pandas as pds1 = pd.Series([1,2,3,4],index=[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;])print(s1)运行结果a    1b    2c    3d    4dtype: int64</code></pre><h3 id="索引区别"><a href="#索引区别" class="headerlink" title="索引区别"></a>索引区别</h3><pre><code class="language-python">s2 = 517 3  26 31 ad  b  c  e   0  1  2  3  4    </code></pre><h4 id="标签索引与位置索引"><a href="#标签索引与位置索引" class="headerlink" title="标签索引与位置索引"></a>标签索引与位置索引</h4><pre><code class="language-python">#标签索引s1[&quot;b&quot;]运行结果b3dtype: int64#位置索引s1[2]运行结果b3dtype: int64</code></pre><pre><code class="language-python">标签索引s1[&quot;d&quot;:&quot;c&quot;] #包含结束值d 17b 3c 26dtype: int64位置索引s1[1:3]#不包含结束值d 17b 3dtype: int64</code></pre><p>索引取值时按照标签，切片取值按照位置</p><h3 id="loc和iloc区别"><a href="#loc和iloc区别" class="headerlink" title="loc和iloc区别"></a>loc和iloc区别</h3><p>loc-用标签索引</p><p>iloc-用位置索引</p><pre><code class="language-python">s2 = 517 3  26 31 13  5  7  9  #标签索引 0  1  2  3  4  #位置索引</code></pre><p>loc - 用标签索引</p><pre><code class="language-python">s2.loc[1:3]运行结果15317dtype: int64</code></pre><p>iloc-用位置索引</p><pre><code class="language-python">s2.iloc[1:3]运行结果31753dtype: int64</code></pre><h3 id="创建Series的另一种方式"><a href="#创建Series的另一种方式" class="headerlink" title="创建Series的另一种方式"></a>创建Series的另一种方式</h3><p>给Series构造函数传字典</p><pre><code>s3 = pd.Series(&#123;&quot;数字1&quot;:1,&quot;数字2&quot;:2,&quot;数字3&quot;:3&#125;)</code></pre><p>查看标签是否存在</p><pre><code class="language-python">&quot;数字1&quot; in s3存在返回布尔值True不存在返回布尔值False</code></pre><h3 id="修改Series值"><a href="#修改Series值" class="headerlink" title="修改Series值"></a>修改Series值</h3><pre><code class="language-python">s3[&quot;数字1&quot;]  = 2s3.loc[&quot;数字1&quot;] = 2#标签索引s3.iloc[&quot;0&quot;] = 2 #位置索引</code></pre><h3 id="根据条件筛选Series元素"><a href="#根据条件筛选Series元素" class="headerlink" title="根据条件筛选Series元素"></a>根据条件筛选Series元素</h3><pre><code class="language-python">s3[s3 &gt; 1]可利用逻辑符号and or but,&amp;| ~s3[(s3 &gt; 1) | (s3 &lt; 5)]</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python循环</title>
      <link href="/2025/04/15/python%E5%9F%BA%E7%A1%80/Python%E5%BE%AA%E7%8E%AF/"/>
      <url>/2025/04/15/python%E5%9F%BA%E7%A1%80/Python%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="While循环"><a href="#While循环" class="headerlink" title="While循环"></a>While循环</h3><pre><code class="language-python">while 条件A:行动B</code></pre><p>条件A为True执行行动B，为False结束循环</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言的基本数据类型</title>
      <link href="/2025/04/14/c%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2025/04/14/c%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>数据类型就是字母和数字，但是分类型例如10是一个整数，0.1是一个小数，A是一个字符，C语言提供多种数据类型给我们使用。</p><p>不同数据类型占用的空间也不同，新概念，字和字节</p><p>计算机底层只能用0和1表示，例如十进制的2要转为二进制的110（3个bit位）占用三个位置，一般占用8个bit位表示一个字节（B），2个字节等于1个字，所以一个字表示16个bit位，它们是计量单位。</p><p>内存大小128G，256G按下方进制计算的</p><p><strong>8 bit &#x3D; 1 B ，1024 B &#x3D; 1KB，1024 KB &#x3D; 1 MB，1024 MB &#x3D; 1GB，1024 GB &#x3D; 1TB，1024TB &#x3D; 1PB</strong></p><p>不同的系统数据类型也会不同</p><h3 id="原码、反码和补码"><a href="#原码、反码和补码" class="headerlink" title="原码、反码和补码"></a>原码、反码和补码</h3><h4 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h4><p>数字只能用0和1表示，只能表示正数，负数的表示方法如下</p><p>一共有4个bit位来保存我们的数据，为了表示正负，我们可以让第一个bit位专门来保存符号</p><p>4个bit位能够表示的数据范围</p><ul><li>最小：1111 &#x3D;&gt; -(2^2 + 2^1 + 2^0) &#x3D;&gt; -7 </li><li>最大：0111 &#x3D;&gt; +(2^2 + 2^1 + 2^0) &#x3D;&gt; +7 &#x3D;&gt; 7</li></ul><p>原码表示很简单，但是在做加减法过程中非常麻烦，例如（4bit）</p><h4 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h4><p>正数的反码是其本身<br>负数的反码是在其原码的基础上, 符号位不变，其余各个位取反<br>经过上面的定义，我们再来进行加减法：</p><p>1+(-1) &#x3D; 0001 + 1110 &#x3D; 1111 &#x3D;&gt; -0 </p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C程序基本格式</title>
      <link href="/2025/04/14/c%E8%AF%AD%E8%A8%80/C%E7%A8%8B%E5%BA%8F%E5%9F%BA%E6%9C%AC%E6%A0%BC%E5%BC%8F/"/>
      <url>/2025/04/14/c%E8%AF%AD%E8%A8%80/C%E7%A8%8B%E5%BA%8F%E5%9F%BA%E6%9C%AC%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="C语言的Hello-World"><a href="#C语言的Hello-World" class="headerlink" title="C语言的Hello World"></a>C语言的Hello World</h3><pre><code class="language-c">#include &lt;stdio.h&gt;int main() &#123;    printf(&quot;Hello World!&quot;);  return 0;&#125;</code></pre><p>C语言程序入口是<strong>Main</strong>函数，写法如下</p><pre><code class="language-c">int main() &#123;  //符号要用英文符号    程序代码...&#125;</code></pre><p>把一段话打印到控制台需要**printf(内容)**完成，这是一种函数调用</p><pre><code class="language-c">printf(&quot;Hello World!&quot;);   //最后叫;结束这一行（英文符号）</code></pre><p>双引号囊括的内容称为字符串</p><pre><code>include &lt;stdio.h&gt; //引入函数库</code></pre><p>引入系统库提供的函数包括<strong>printf</strong></p><p>C程序的固定代码模式</p><pre><code class="language-c">#include &lt;stdio.h&gt;int main() &#123;    程序代码&#125;</code></pre><p>注释文本采用</p><pre><code class="language-c">#include &lt;stdio.h&gt;/* * 多行注释 * 多行注释 */int main() &#123;                 //单行注释    printf(&quot;Hello World!&quot;);  //单行注释  return 0; //单行注释&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo d上传到Github报错解决办法</title>
      <link href="/2025/04/04/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
      <url>/2025/04/04/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>Hexo d发生错误</p><p>出现下面的错误</p><pre><code class="language-yaml">FATAL &#123;  err: Error: Spawn failed      at ChildProcess.&lt;anonymous&gt; (F:\desker\blog\node_modules\hexo-util\lib\spawn.js:51:21)      at ChildProcess.emit (node:events:527:28)      at ChildProcess.cp.emit (F:\desker\blog\node_modules\cross-spawn\lib\enoent.js:34:29)      at Process.ChildProcess._handle.onexit (node:internal/child_process:291:12) &#123;    code: 128  &#125;</code></pre><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>问题大多是因为git进行push或者hexo d的时候改变了一些.deploy_git文件下的内容。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>1.删除 <code>.deploy_git</code> 文件夹;<br>2.输入 <code>git config --global core.autocrlf false</code><br>3.然后，依次执行</p><pre><code class="language-yaml">hexo cleanhexo ghexo d</code></pre><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>1.进入hexo根目录<br>2.直接把根目录的<code>.deploy_git</code>和<code>public</code>直接删除！<br>3.然后，依次执行</p><pre><code class="language-yaml">hexo cleanhexo ghexo d</code></pre><h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><p>1.进入hexo根目录的_config.yml<br>2.找到# Deployment<br>3.把<code> repo: https://github.com/你的名字/你的名字.github.io.git</code><br>改为<code> repo: git@github.com:你的名字/你的名字.github.io.git</code><br>5.然后，依次执行：</p><pre><code class="language-yaml">hexo cleanhexo ghexo d</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
