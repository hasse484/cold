<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python循环</title>
      <link href="/2025/04/15/Python%E5%BE%AA%E7%8E%AF/"/>
      <url>/2025/04/15/Python%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言的基本数据类型</title>
      <link href="/2025/04/14/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2025/04/14/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>数据类型就是字母和数字，但是分类型例如10是一个整数，0.1是一个小数，A是一个字符，C语言提供多种数据类型给我们使用。</p><p>不同数据类型占用的空间也不同，新概念，字和字节</p><p>计算机底层只能用0和1表示，例如十进制的2要转为二进制的110（3个bit位）占用三个位置，一般占用8个bit位表示一个字节（B），2个字节等于1个字，所以一个字表示16个bit位，它们是计量单位。</p><p>内存大小128G，256G按下方进制计算的</p><p><strong>8 bit &#x3D; 1 B ，1024 B &#x3D; 1KB，1024 KB &#x3D; 1 MB，1024 MB &#x3D; 1GB，1024 GB &#x3D; 1TB，1024TB &#x3D; 1PB</strong></p><p>不同的系统数据类型也会不同</p><h3 id="原码、反码和补码"><a href="#原码、反码和补码" class="headerlink" title="原码、反码和补码"></a>原码、反码和补码</h3><h4 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h4><p>数字只能用0和1表示，只能表示正数，负数的表示方法如下</p><p>一共有4个bit位来保存我们的数据，为了表示正负，我们可以让第一个bit位专门来保存符号</p><p>4个bit位能够表示的数据范围</p><ul><li>最小：1111 &#x3D;&gt; -(2^2 + 2^1 + 2^0) &#x3D;&gt; -7 </li><li>最大：0111 &#x3D;&gt; +(2^2 + 2^1 + 2^0) &#x3D;&gt; +7 &#x3D;&gt; 7</li></ul><p>原码表示很简单，但是在做加减法过程中非常麻烦，例如（4bit）</p><h4 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h4><p>正数的反码是其本身<br>负数的反码是在其原码的基础上, 符号位不变，其余各个位取反<br>经过上面的定义，我们再来进行加减法：</p><p>1+(-1) &#x3D; 0001 + 1110 &#x3D; 1111 &#x3D;&gt; -0 </p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C程序基本格式</title>
      <link href="/2025/04/14/C%E7%A8%8B%E5%BA%8F%E5%9F%BA%E6%9C%AC%E6%A0%BC%E5%BC%8F/"/>
      <url>/2025/04/14/C%E7%A8%8B%E5%BA%8F%E5%9F%BA%E6%9C%AC%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="C语言的Hello-World"><a href="#C语言的Hello-World" class="headerlink" title="C语言的Hello World"></a>C语言的Hello World</h3><pre><code class="language-c">#include &lt;stdio.h&gt;int main() &#123;    printf(&quot;Hello World!&quot;);  return 0;&#125;</code></pre><p>C语言程序入口是<strong>Main</strong>函数，写法如下</p><pre><code class="language-c">int main() &#123;  //符号要用英文符号    程序代码...&#125;</code></pre><p>把一段话打印到控制台需要**printf(内容)**完成，这是一种函数调用</p><pre><code class="language-c">printf(&quot;Hello World!&quot;);   //最后叫;结束这一行（英文符号）</code></pre><p>双引号囊括的内容称为字符串</p><pre><code>include &lt;stdio.h&gt; //引入函数库</code></pre><p>引入系统库提供的函数包括<strong>printf</strong></p><p>C程序的固定代码模式</p><pre><code class="language-c">#include &lt;stdio.h&gt;int main() &#123;    程序代码&#125;</code></pre><p>注释文本采用</p><pre><code class="language-c">#include &lt;stdio.h&gt;/* * 多行注释 * 多行注释 */int main() &#123;                 //单行注释    printf(&quot;Hello World!&quot;);  //单行注释  return 0; //单行注释&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo d上传到Github报错解决办法</title>
      <link href="/2025/04/04/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
      <url>/2025/04/04/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>Hexo d发生错误</p><p>出现下面的错误</p><pre><code class="language-yaml">FATAL &#123;  err: Error: Spawn failed      at ChildProcess.&lt;anonymous&gt; (F:\desker\blog\node_modules\hexo-util\lib\spawn.js:51:21)      at ChildProcess.emit (node:events:527:28)      at ChildProcess.cp.emit (F:\desker\blog\node_modules\cross-spawn\lib\enoent.js:34:29)      at Process.ChildProcess._handle.onexit (node:internal/child_process:291:12) &#123;    code: 128  &#125;</code></pre><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>问题大多是因为git进行push或者hexo d的时候改变了一些.deploy_git文件下的内容。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>1.删除 <code>.deploy_git</code> 文件夹;<br>2.输入 <code>git config --global core.autocrlf false</code><br>3.然后，依次执行</p><pre><code class="language-yaml">hexo cleanhexo ghexo d</code></pre><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>1.进入hexo根目录<br>2.直接把根目录的<code>.deploy_git</code>和<code>public</code>直接删除！<br>3.然后，依次执行</p><pre><code class="language-yaml">hexo cleanhexo ghexo d</code></pre><h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><p>1.进入hexo根目录的_config.yml<br>2.找到# Deployment<br>3.把<code> repo: https://github.com/你的名字/你的名字.github.io.git</code><br>改为<code> repo: git@github.com:你的名字/你的名字.github.io.git</code><br>5.然后，依次执行：</p><pre><code class="language-yaml">hexo cleanhexo ghexo d</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
